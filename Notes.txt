In the nevada.sup file, there is a variable defined as follows:

#VARDEF		snwa_cumulative_2020	
#type	sum		
if(_cyear => snwa_end, snwa_cumulative[_y-1] + snwa.take,0)			
#ENDVAR

The => is wrong and should be flagged by IRPSIM. Should be

#VARDEF		snwa_cumulative_2020	
#type	sum		
if(_cyear >= snwa_end, snwa_cumulative[_y-1] + snwa.take,0)			
#ENDVAR

In the Colorado_River_Aqueduct\pvid.sup file, there is a variable defined as follows:

#VARDEF		pvid_max_check	
if(pvid_option [_y-1] => (102500 * 0.9), 1, 0)			
#ENDVAR

The => is wrong and should be flagged by IRPSIM. Should be

#VARDEF		pvid_max_check	
if(pvid_option [_y-1] >= (102500 * 0.9), 1, 0)			
#ENDVAR
			

			        <CollectionViewSource x:Key="SupplyCollection" Source="{Binding Supply}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
         </CollectionViewSource>
        <CollectionViewSource x:Key="DemandCollection" Source="{Binding Demand}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        <CollectionViewSource x:Key="StorageCollection" Source="{Binding Storage}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        <CollectionViewSource x:Key="CostCollection" Source="{Binding Cost}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        <CollectionViewSource x:Key="VariableCollection" Source="{Binding Variables}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        <CollectionViewSource x:Key="ScriptCollection" Source="{Binding Scripts}">
              <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        <CollectionViewSource x:Key="ScenarioCollection" Source="{Binding Scenarios}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        <CollectionViewSource x:Key="CategoryCollection" Source="{Binding Categories}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        <CollectionViewSource x:Key="DefinitionCollection" Source="{Binding Definitions}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>



		     <TreeView Grid.Row="1" SelectedItemChanged="TreeView_SelectedItemChanged" KeyDown="TreeView_KeyDown">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <cmd:EventToCommand Command="{Binding SelectIrpObjectCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <TreeViewItem ItemsSource="{Binding Source={StaticResource SupplyCollection}}" ItemTemplate="{StaticResource VariableTemplate}">
                <TreeViewItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image Width="16" Height="16" Margin="3,0" Source="/Images/Region.png" />
                        <TextBlock Text="Supply" Focusable="True"/>
                    </StackPanel>
                </TreeViewItem.Header>
            </TreeViewItem>
            <TreeViewItem ItemsSource="{Binding Source={StaticResource DemandCollection}}" ItemTemplate="{StaticResource VariableTemplate}">
                <TreeViewItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image Width="16" Height="16" Margin="3,0" Source="/Images/Region.png" />
                        <TextBlock Text="Demand" Focusable="True"/>
                    </StackPanel>
                </TreeViewItem.Header>
            </TreeViewItem>
            <TreeViewItem ItemsSource="{Binding Source={StaticResource StorageCollection}}" ItemTemplate="{StaticResource VariableTemplate}">
                <TreeViewItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image Width="16" Height="16" Margin="3,0" Source="/Images/Region.png" />
                        <TextBlock Text="Supply" Focusable="True"/>
                    </StackPanel>
                </TreeViewItem.Header>
            </TreeViewItem>
            <TreeViewItem Header="Cost" ItemsSource="{Binding Source={StaticResource CostCollection}}" ItemTemplate="{StaticResource VariableTemplate}"/>
            <TreeViewItem Header="Scenarios" ItemsSource="{Binding Source={StaticResource ScenarioCollection}}" ItemTemplate="{StaticResource NormalTemplate}"/>
            <TreeViewItem Header="Scripts" ItemsSource="{Binding Source={StaticResource ScriptCollection}}"/>
            <TreeViewItem Header="Categories" ItemsSource="{Binding Source={StaticResource CategoryCollection}}"/>
            <TreeViewItem Header="Definitions" ItemsSource="{Binding Source={StaticResource DefinitionCollection}}"/>
            <TreeViewItem Header="Variables" ItemsSource="{Binding Source={StaticResource VariableCollection}}"/>
        </TreeView>
    </Grid>

	            <TreeViewItem ItemsSource="{Binding Source={StaticResource SupplyCollection}}" ItemTemplate="{StaticResource VariableTemplate}">
                <TreeViewItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image Width="16" Height="16" Margin="3,0" Source="/Images/Region.png" />
                        <TextBlock Text="Supply" Focusable="True"/>
                    </StackPanel>
                </TreeViewItem.Header>
            </TreeViewItem>
            <TreeViewItem ItemsSource="{Binding Source={StaticResource DemandCollection}}" ItemTemplate="{StaticResource VariableTemplate}">
                <TreeViewItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image Width="16" Height="16" Margin="3,0" Source="/Images/Region.png" />
                        <TextBlock Text="Demand" Focusable="True"/>
                    </StackPanel>
                </TreeViewItem.Header>
            </TreeViewItem>
            <TreeViewItem ItemsSource="{Binding Source={StaticResource StorageCollection}}" ItemTemplate="{StaticResource VariableTemplate}">
                <TreeViewItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image Width="16" Height="16" Margin="3,0" Source="/Images/Region.png" />
                        <TextBlock Text="Supply" Focusable="True"/>
                    </StackPanel>
                </TreeViewItem.Header>
            </TreeViewItem>
            <TreeViewItem Header="Cost" ItemsSource="{Binding Source={StaticResource CostCollection}}" ItemTemplate="{StaticResource VariableTemplate}"/>
            <TreeViewItem Header="Scenarios" ItemsSource="{Binding Source={StaticResource ScenarioCollection}}" ItemTemplate="{StaticResource NormalTemplate}"/>
            <TreeViewItem Header="Scripts" ItemsSource="{Binding Source={StaticResource ScriptCollection}}"/>
            <TreeViewItem Header="Categories" ItemsSource="{Binding Source={StaticResource CategoryCollection}}"/>
            <TreeViewItem Header="Definitions" ItemsSource="{Binding Source={StaticResource DefinitionCollection}}"/>
            <TreeViewItem Header="Variables" ItemsSource="{Binding Source={StaticResource VariableCollection}}"/>


			   public class FileViewModel2 : DisplayViewModel
    {
        private string filePath;
        //private static BackgroundWorker backgroundWorkerLoadFile = null;
        //private static FileViewModel loadingModel = null;

        ~FileViewModel()
        {
            Debug.WriteLine("Disposing FileView");
        }

        public FileViewModel(ref ObservableCollection<DisplayViewModel> collection, string path)
            : base(ref collection)
        {
            this.filePath = path;
            
            try
            {
                StreamReader streamReader = new StreamReader(this.filePath);
                FileContents = streamReader.ReadToEnd().Replace("\r","");
                streamReader.Close();
            }
            catch (Exception ex)
            {
                FileContents = ex.Message;
            }
        }

        private int _selectedLine;
        public int SelectedLine
        {
            get { return _selectedLine; }
            set { Set("SelectedLine", ref _selectedLine, value); }
        }

        private int _selectedCharacterIndex;
        public int SelectedCharacterIndex
        {
            get { return _selectedCharacterIndex; }
            set { Set("SelectedCharacterIndex", ref _selectedCharacterIndex, value); }
        }

        private bool _searching;
        public bool Searching
        {
            get { return _searching; }
            set { Set("Searching", ref _searching, value); }
        }

        private string _searchText;
        public string SearchText
        {
            get { return _searchText; }
            set { Set("SearchText", ref _searchText, value); }
        }

        public int SelectedObjectIndex
        {
            set { SelectedLine = getLineFromObjectIndex(value); }
        }

        private string _oldSearchText;
        private void search()
        {
            if (_oldSearchText != SearchText)
            {
                _oldSearchText = SearchText;
                SelectedCharacterIndex = -1;
            }
            SelectedCharacterIndex = FileContents.IndexOf(SearchText, SelectedCharacterIndex + 1);
        }

        private int getLineFromObjectIndex(int index)
        {
            if (index == 0) return 0;

            String s = FileContents;
            StringReader sr = new StringReader(FileContents);

            String line;
            int lineno = 0;
            int startline = -1;
            while ((line = sr.ReadLine()) != null)
            {
                line = line.Trim();
                if (line.Length>0 && line[0] == '#')
                {
                    if (line.Substring(0, 4).ToUpper() == "#END")
                    {
                        if (--index == 0)
                        {
                            sr.Close();
                            return startline;
                        }
                        startline = -1;
                    }
                    else if (startline < 0)
                        startline = lineno;
                }
                lineno++;
            }
            sr.Close();
            return 0;
        }

        /*
        public FileViewModel(string path, string contents)
        {
            this.filePath = path;
            this.fileContents = contents;
        }
        */


        public override string Name { get { return Path.GetFileName(filePath); } }

        public override string PathName { get { return filePath; } }

        private string _fileContents;
        public string FileContents
        {
            get { return _fileContents; }
            set { Set("FileContents", ref _fileContents, value); }
        }

        private bool _modified = false;
        public bool Modified
        {
            get { return _modified; }
            set
            {
                Debug.WriteLine("Size of file contents is {0}", FileContents.Length);
                Set("Modified", ref _modified, value);
            }
        }

        RelayCommand _modifiedCommand;
        public RelayCommand ModifiedCommand
        {
            get
            {
                if (_modifiedCommand == null)
                    _modifiedCommand = new RelayCommand(() => { Debug.WriteLine(String.Format("Executing modified command on {0}", Name)); Modified = true; });
                return _modifiedCommand;
            }
        }

        RelayCommand _searchCommand;
        public RelayCommand SearchCommand
        {
            get
            {
                if (_searchCommand == null)
                    _searchCommand = new RelayCommand(search);
                return _searchCommand;
            }
        }
    }